Problem 2

Part a) After the given operations, stack 1 would have 3,4,5,6 (from top to bottom).
		Stack 2 would have nothing in it, as both 1 and 2 were dequeued 

Part b) Worst case runtime for enqueue(x) would just be O(1), since it would just be a single push.
		Worst case runtime for dequeue would be O(n), since if stack 2 is empty, it will have to pop
		everything from stack 1, which would be n items.

Part c) In this case, enqueue would still be O(1), since it is just a single push. However, dequeue 
		would now take O(n^2). This is because in the worst case, you will have to pop n times, each
		of which will take O(n) times, which would come out to O(n^2).


Problem 3

Part a) This would take Theta(nlogn). The inner loop, in worst case (if A[i] is always 0), will take logn time, since j is doubling everytime. The outer for loop will take n time, since it goes through 0 to n, one by one. 

Part b) This would be Theta(n(log^2)n). This is because it is summation in the inner loop, adding (n/1 + n/2 + ... + n/n), which can be factored to n(1 + 1/2 + 1/3 + ... + 1/n). This can be written as the sum, from i=0 to n-1, summing up n/i(logn). You can factor out the nlogn, and the summation can be simplified to logn. Combining these two gives us n(log^2)n.


Part c) This would run in Theta(n^2). This is because the outside for loop runs n times, triggering the if statement n/10 times. The inside for loop is a summation, and does (10 + 20 + 30 + ... n) work, which can be simplified to 10 (1 + 2 + 3 + ... n/10). This means it is a summation, simplifying to (n^2) when the if triggers. If it does not we do O(1), so we take the larger, and it is Theta(n^2).

Part d) This one would be Theta(nlogn). This is similar to part c, except the inside is not a summation, it is adding (10 + 20 + 40 + 60 + ...n). This can be simplified to 10(2^0 + 2^1 + 2^3...). We can then simplify this to be nlogn. 
